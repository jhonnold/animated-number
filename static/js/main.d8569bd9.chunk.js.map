{"version":3,"sources":["../../src/index.tsx","App.js","index.js"],"names":["props","number","initial","fps","duration","format","component","C","rest","React","value","setValue","previousValue","lastTimestamp","startTimestamp","handle","animate","timestamp","shouldProcess","pValue","reset","sTimestamp","nextValue","endAnimation","raf","startAnimation","rand","Math","random","App","useState","setNumber","useEffect","interval","setInterval","clearInterval","ReactDOM","render","document","getElementById"],"mappings":"4NAgBA,I,EAAiC,SAACA,G,IAE1BC,EAOAD,EAPAC,O,EAOAD,EANAE,mBAAUA,EAAA,I,EAMVF,EALAG,eAAMA,EAAA,K,EAKNH,EAJAI,oBAAWA,EAAA,MACXC,EAGAL,EAHAK,O,EAGAL,EAFAM,UAAWC,WAAIA,EAAA,MACZC,E,oIAAAA,CACHR,8D,EAEsBS,gBAAnBC,OAAOC,OACRC,EAAgBH,WAAtB,GAEMI,EAAgBJ,WAAtB,GACMK,EAAiBL,WAAvB,GAEMM,EAASN,IAAf,SAMMO,EAAU,SAAVA,EAAWC,EAAD,GACZ,GALkB,SAACA,GAAD,OACjBJ,EAAD,SACAI,EAAYJ,EAAZI,QAAoC,IAFlB,EAKbC,CAAL,IAKA,IAGA,EAHMC,EAASC,EAAQV,EAAQE,EAA/B,QACMS,EAAaD,EAAQH,EAAYH,EAAvC,QAGA,GAAIG,KAAJ,EACIK,SAKAA,EAAYH,GAHAlB,EAAZ,KACqBgB,EAAD,GAApB,GAKAK,IAAJ,GACIC,IACAZ,OAEAA,KACAC,YAEAE,YACAD,YAEAE,UAAiBS,IAAjBT,SA3BAA,UAAiBS,IAAjBT,IA+BFU,EAAiB,WACnBV,UAAiBS,KAAI,SAAAP,GACjBD,EAAQC,GAARD,OAIFO,EAAe,WACbR,EAAJ,SAAoBS,WAAWT,EAAXS,UAcxB,OAXAf,eAAgB,WAGZ,OAFAgB,IAEO,kBAAMF,OAHjBd,IAMAA,eAAgB,WACZc,IACAE,MACD,CAHHhB,IAKOA,wCAAcJ,EAASA,EAAH,GAA3B,ICzFEqB,EAAO,kBAAMC,KAAKC,UAcTC,EAZH,WAAO,IAAD,EACcC,mBAASJ,KADvB,mBACPzB,EADO,KACC8B,EADD,KASd,OANAC,qBAAU,WACN,IAAMC,EAAWC,aAAY,kBAAMH,EAAUL,OAAS,KAEtD,OAAO,kBAAMS,cAAcF,MAC5B,IAEI,kBAAC,EAAD,CAAgBhC,OAAQA,KCTnCmC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.d8569bd9.chunk.js","sourcesContent":["import React from 'react';\nimport raf from 'raf';\n\ninterface FormatFn {\n    (value: number): string | number;\n}\n\ninterface Props extends React.HTMLAttributes<HTMLElement> {\n    number: number;\n    initial?: number;\n    fps?: number;\n    duration?: number;\n    format?: FormatFn;\n    component?: string;\n}\n\nconst AnimatedNumber: React.FC = (props: Props): React.ReactElement => {\n    const {\n        number,\n        initial = 0,\n        fps = 60,\n        duration = 250,\n        format,\n        component: C = 'p',\n        ...rest\n    } = props;\n\n    const [value, setValue] = React.useState<number>(initial);\n    const previousValue = React.useRef<number>(initial);\n\n    const lastTimestamp = React.useRef<number>(0);\n    const startTimestamp = React.useRef<number>(0);\n\n    const handle = React.useRef<number>();\n\n    const shouldProcess = (timestamp: number): boolean =>\n        !lastTimestamp.current ||\n        timestamp - lastTimestamp.current > 1000 / fps;\n\n    const animate = (timestamp: number, reset?: boolean): void => {\n        if (!shouldProcess(timestamp)) {\n            handle.current = raf(animate);\n            return;\n        }\n\n        const pValue = reset ? value : previousValue.current;\n        const sTimestamp = reset ? timestamp : startTimestamp.current;\n\n        let nextValue: number;\n        if (timestamp - sTimestamp >= duration) {\n            nextValue = number; // We are at time, just finish\n        } else {\n            const gap = number - pValue;\n            const pctDuration = (timestamp - sTimestamp) / duration;\n\n            nextValue = pValue + gap * pctDuration;\n        }\n\n        if (nextValue === number) {\n            endAnimation();\n            setValue(nextValue);\n        } else {\n            setValue(nextValue);\n            previousValue.current = pValue;\n\n            startTimestamp.current = sTimestamp;\n            lastTimestamp.current = timestamp;\n\n            handle.current = raf(animate);\n        }\n    };\n\n    const startAnimation = (): void => {\n        handle.current = raf(timestamp => {\n            animate(timestamp, true);\n        });\n    };\n\n    const endAnimation = (): void => {\n        if (handle.current) raf.cancel(handle.current);\n    };\n\n    React.useEffect(() => {\n        startAnimation();\n\n        return () => endAnimation();\n    }, []);\n\n    React.useEffect(() => {\n        endAnimation();\n        startAnimation();\n    }, [number]);\n\n    return <C {...rest}>{format ? format(value) : value}</C>;\n};\n\nexport default AnimatedNumber;\n","import React, { useState, useEffect } from 'react';\n\nimport AnimatedNumber from '@jhonnold/react-animated-number';\n\nconst rand = () => Math.random();\n\nconst App = () => {\n    const [number, setNumber] = useState(rand());\n\n    useEffect(() => {\n        const interval = setInterval(() => setNumber(rand()), 10000);\n\n        return () => clearInterval(interval);\n    }, []);\n\n    return <AnimatedNumber number={number} />;\n};\n\nexport default App;\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}