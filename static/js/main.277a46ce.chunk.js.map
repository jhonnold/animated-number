{"version":3,"sources":["../../src/index.tsx","App.js","index.js"],"names":["props","number","initial","fps","duration","format","component","C","rest","React","value","setValue","previousValue","lastTimestamp","startTimestamp","handle","animate","timestamp","shouldProcess","pValue","reset","sTimestamp","nextValue","endAnimation","raf","startAnimation","App","useState","Math","round","random","setNumber","numberInput","useRef","shouldRound","setShouldRound","tag","setTag","setDuration","setFps","className","href","$","type","ref","onChange","target","checked","onClick","current","ReactDOM","render","document","getElementById"],"mappings":"4NAgBA,I,EAAwC,SAACA,G,IAEjCC,EAOAD,EAPAC,O,EAOAD,EANAE,mBAAUA,EAAA,I,EAMVF,EALAG,eAAMA,EAAA,K,EAKNH,EAJAI,oBAAWA,EAAA,MACXC,EAGAL,EAHAK,O,EAGAL,EAFAM,UAAWC,WAAIA,EAAA,MACZC,E,oIAAAA,CACHR,8D,EAEsBS,gBAAnBC,OAAOC,OACRC,EAAgBH,WAAtB,GAEMI,EAAgBJ,WAAtB,GACMK,EAAiBL,WAAvB,GAEMM,EAASN,IAAf,SAMMO,EAAU,SAAVA,EAAWC,EAAD,GACZ,GALkB,SAACA,GAAD,OACjBJ,EAAD,SACAI,EAAYJ,EAAZI,QAAoC,IAFlB,EAKbC,CAAL,IAKA,IAGA,EAHMC,EAASC,EAAQV,EAAQE,EAA/B,QACMS,EAAaD,EAAQH,EAAYH,EAAvC,QAGA,GAAIG,KAAJ,EACIK,SAKAA,EAAYH,GAHAlB,EAAZ,KACqBgB,EAAD,GAApB,GAKAK,IAAJ,GACIC,IACAZ,OAEAA,KACAC,YAEAE,YACAD,YAEAE,UAAiBS,IAAjBT,SA3BAA,UAAiBS,IAAjBT,IA+BFU,EAAiB,WACnBV,UAAiBS,KAAI,SAAAP,GACjBD,EAAQC,GAARD,OAIFO,EAAe,WACbR,EAAJ,SAAoBS,WAAWT,EAAXS,UAcxB,OAXAf,eAAgB,WAGZ,OAFAgB,IAEO,kBAAMF,OAHjBd,IAMAA,eAAgB,WACZc,IACAE,MACD,CAHHhB,IAKOA,wCAAcJ,EAASA,EAAH,GAA3B,ICFWqB,EAvFH,WAAO,IAAD,EACcC,mBAASC,KAAKC,MAAsB,IAAhBD,KAAKE,WADvC,mBACP7B,EADO,KACC8B,EADD,KAERC,EAAcC,mBAFN,EASwBN,oBAAS,GATjC,mBASPO,EATO,KASMC,EATN,OAUQR,mBAAS,MAVjB,mBAUPS,EAVO,KAUFC,EAVE,OAWkBV,mBAAS,KAX3B,mBAWPvB,EAXO,KAWGkC,EAXH,OAYQX,mBAAS,IAZjB,mBAYPxB,EAZO,KAYFoC,EAZE,KAcd,OACI,yBAAKC,UAAU,aACX,+DACA,yBAAKA,UAAU,SACX,uBAAGC,KAAK,qDAAR,UAGA,uBAAGA,KAAK,iEAAR,QAIJ,kBAAC,EAAD,CACIxC,OAAQA,EACRI,OAAQ6B,EAAc,SAAAQ,GAAC,OAAId,KAAKC,MAAMa,IAAK,SAAAA,GAAC,OAAIA,GAChDpC,UAAW8B,EACXhC,SAAUA,EACVD,IAAKA,IAET,yBAAKqC,UAAU,WACX,6BACI,8CACA,2BAAOG,KAAK,SAASC,IAAKZ,KAE9B,6BACI,gDACA,2BACIW,KAAK,SACLE,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBR,EAAYQ,EAAOpC,QAC7CA,MAAON,KAGf,6BACI,sDACA,2BACIuC,KAAK,SACLE,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBP,EAAOO,EAAOpC,QACxCA,MAAOP,KAGf,6BACI,4CACA,4BACIO,MAAO0B,EACPS,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBT,EAAOS,EAAOpC,SAExC,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,QAAd,UAGR,6BACI,gDACA,2BACIiC,KAAK,WACLI,QAASb,EACTW,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OACNX,IAAiBW,EAAOC,aAIpC,6BACI,4BAAQC,QA5EH,WAAO,IAChBtC,EAAUsB,EAAYiB,QAAtBvC,MACRqB,EAAUrB,KA0EE,gBC9EpBwC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.277a46ce.chunk.js","sourcesContent":["import React from 'react';\nimport raf from 'raf';\n\ninterface FormatFn {\n    (value: number): string | number;\n}\n\ninterface Props extends React.HTMLAttributes<HTMLElement> {\n    number: number;\n    initial?: number;\n    fps?: number;\n    duration?: number;\n    format?: FormatFn;\n    component?: string;\n}\n\nconst AnimatedNumber: React.FC<Props> = (props: Props): React.ReactElement => {\n    const {\n        number,\n        initial = 0,\n        fps = 60,\n        duration = 250,\n        format,\n        component: C = 'p',\n        ...rest\n    } = props;\n\n    const [value, setValue] = React.useState<number>(initial);\n    const previousValue = React.useRef<number>(initial);\n\n    const lastTimestamp = React.useRef<number>(0);\n    const startTimestamp = React.useRef<number>(0);\n\n    const handle = React.useRef<number>();\n\n    const shouldProcess = (timestamp: number): boolean =>\n        !lastTimestamp.current ||\n        timestamp - lastTimestamp.current > 1000 / fps;\n\n    const animate = (timestamp: number, reset?: boolean): void => {\n        if (!shouldProcess(timestamp)) {\n            handle.current = raf(animate);\n            return;\n        }\n\n        const pValue = reset ? value : previousValue.current;\n        const sTimestamp = reset ? timestamp : startTimestamp.current;\n\n        let nextValue: number;\n        if (timestamp - sTimestamp >= duration) {\n            nextValue = number; // We are at time, just finish\n        } else {\n            const gap = number - pValue;\n            const pctDuration = (timestamp - sTimestamp) / duration;\n\n            nextValue = pValue + gap * pctDuration;\n        }\n\n        if (nextValue === number) {\n            endAnimation();\n            setValue(nextValue);\n        } else {\n            setValue(nextValue);\n            previousValue.current = pValue;\n\n            startTimestamp.current = sTimestamp;\n            lastTimestamp.current = timestamp;\n\n            handle.current = raf(animate);\n        }\n    };\n\n    const startAnimation = (): void => {\n        handle.current = raf(timestamp => {\n            animate(timestamp, true);\n        });\n    };\n\n    const endAnimation = (): void => {\n        if (handle.current) raf.cancel(handle.current);\n    };\n\n    React.useEffect(() => {\n        startAnimation();\n\n        return () => endAnimation();\n    }, []);\n\n    React.useEffect(() => {\n        endAnimation();\n        startAnimation();\n    }, [number]);\n\n    return <C {...rest}>{format ? format(value) : value}</C>;\n};\n\nexport default AnimatedNumber;\n","import React, { useState, useRef } from 'react';\n\nimport AnimatedNumber from '@jhonnold/react-animated-number';\n\nconst App = () => {\n    const [number, setNumber] = useState(Math.round(Math.random() * 1000));\n    const numberInput = useRef();\n\n    const changeNumber = () => {\n        const { value } = numberInput.current;\n        setNumber(value);\n    };\n\n    const [shouldRound, setShouldRound] = useState(true);\n    const [tag, setTag] = useState('h3');\n    const [duration, setDuration] = useState(250);\n    const [fps, setFps] = useState(60);\n\n    return (\n        <div className=\"container\">\n            <h1>@jhonnold/react-animated-number</h1>\n            <div className=\"links\">\n                <a href=\"https://github.com/jhonnold/react-animated-number\">\n                    Github\n                </a>\n                <a href=\"https://www.npmjs.com/package/@jhonnold/react-animated-number\">\n                    NPM\n                </a>\n            </div>\n            <AnimatedNumber\n                number={number}\n                format={shouldRound ? $ => Math.round($) : $ => $}\n                component={tag}\n                duration={duration}\n                fps={fps}\n            />\n            <div className=\"options\">\n                <div>\n                    <label>Next Number</label>\n                    <input type=\"number\" ref={numberInput} />\n                </div>\n                <div>\n                    <label>Duration (ms)</label>\n                    <input\n                        type=\"number\"\n                        onChange={({ target }) => setDuration(target.value)}\n                        value={duration}\n                    />\n                </div>\n                <div>\n                    <label>Animation Framerate</label>\n                    <input\n                        type=\"number\"\n                        onChange={({ target }) => setFps(target.value)}\n                        value={fps}\n                    />\n                </div>\n                <div>\n                    <label>Component</label>\n                    <select\n                        value={tag}\n                        onChange={({ target }) => setTag(target.value)}\n                    >\n                        <option value=\"h1\">H1</option>\n                        <option value=\"h2\">H2</option>\n                        <option value=\"h3\">H3</option>\n                        <option value=\"h4\">H4</option>\n                        <option value=\"h5\">H5</option>\n                        <option value=\"h6\">H6</option>\n                        <option value=\"p\">P</option>\n                        <option value=\"span\">Span</option>\n                    </select>\n                </div>\n                <div>\n                    <label>Should Round?</label>\n                    <input\n                        type=\"checkbox\"\n                        checked={shouldRound}\n                        onChange={({ target }) =>\n                            setShouldRound(!!target.checked)\n                        }\n                    />\n                </div>\n                <div>\n                    <button onClick={changeNumber}>Animate!</button>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default App;\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}